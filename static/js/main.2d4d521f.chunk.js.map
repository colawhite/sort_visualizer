{"version":3,"sources":["SortingAlgo/SortingAlgo.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","quickSortHelper","low","high","pi","pivot","console","table","i","j","push","tmp","partition","length","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","barOneHeight","barTwoHeight","getBubbleSortAnimations","javaScriptSortedArray","sort","a","b","mergeSortedArray","log","arraysAreEqual","className","onClick","mergeSort","quickSort","bubbleSort","map","value","idx","key","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d4d521f.chunk.js","sourcesContent":["export function getQuickSortAnimations(array) {\n    const animations = [];\n    quickSortHelper(array,0,array.length-1, animations);\n    return animations;\n}\nfunction quickSortHelper(array,low,high, animations){\n    if (low<=high){\n        let pi = partition(array,low,high,animations);\n        quickSortHelper(array,low,pi-1,animations);\n        quickSortHelper(array,pi+1,high,animations);\n    }\n}\nfunction partition(array,low,high,animations){\n    let pivot = array[high];\n    console.table(pivot);\n    let i = low;\n    for (let j=low;j<high;j++){\n        if (array[j] < pivot){\n            animations.push([j, high]);\n            animations.push([i, high]);\n            animations.push([i, high,array[i],array[high]]);\n            let tmp = array[i];\n            array[i] = array[j];\n            array[j] = tmp;\n            i += 1;\n            \n        }\n    }\n    //[array[i], array[high]] = [array[high],array[i]]\n    let tmp = array[high];\n    array[high] = array[i];\n    array[i] = tmp;\n    animations.push([i, high]);\n    animations.push([i, high]);\n    animations.push([i, high,array[i],array[high]]);\n\n    return i\n}\n\n\nexport function getBubbleSortAnimations(array) {\n    var i;\n    var j;\n    const animations = [];\n    for(i=0;i<array.length;i++){\n        for(j=0;j<array.length-i;j++){\n            if (array[j]>array[j+1]){\n                [array[j], array[j+1]] = [array[j+1],array[j]]\n                animations.push([j, j+1]);\n                animations.push([j, j+1]);\n                animations.push([j,j+1,array[j],array[j+1]]);\n            }\n        }\n\n    }\n    return animations;\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React from 'react';\nimport {Button, ButtonToolbar } from 'reactstrap';\nimport {getMergeSortAnimations} from '../SortingAlgo/SortingAlgo.js';\nimport {getBubbleSortAnimations} from '../SortingAlgo/SortingAlgo.js';\nimport {getQuickSortAnimations} from '../SortingAlgo/SortingAlgo.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 50;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 20;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#1976D2';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#AD40BF';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 500));\n    }\n    this.setState({array});\n    console.table(array);\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getQuickSortAnimations(this.state.array);\n    console.table(animations);\n    console.table(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, barTwoIdx, barOneHeight,barTwoHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const isColorChange = i % 3 !== 2;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        if (isColorChange) {  \n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            barOneStyle.height = `${barOneHeight}px`;\n            barTwoStyle.height = `${barTwoHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [barOneIdx, barTwoIdx, barOneHeight,barTwoHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const isColorChange = i % 3 !== 2;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            if (isColorChange) {  \n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * ANIMATION_SPEED_MS);\n            } else {\n              setTimeout(() => {\n                barOneStyle.height = `${barOneHeight}px`;\n                barTwoStyle.height = `${barTwoHeight}px`;\n              }, i * ANIMATION_SPEED_MS);\n          }\n        }\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n\n\n      <div className=\"array-container\">\n       \n        <button style = {{'fontSize':'small'}} onClick={() => this.resetArray()}>Generate New Array</button>\n        <button style = {{'fontSize':'small'}} onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button style = {{'fontSize':'small'}} onClick={() => this.quickSort()}>Quick Sort</button>\n        <button style = {{'fontSize':'small'}} onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        \n        <p></p>\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        \n      </div>\n      \n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer> </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}